---
title: "Crossbow Nightly Report"
execute: 
  warning: false
  echo: false
format: 
  html:
    grid:
        sidebar-width: 0px
        body-width: 2000px
        margin-width: 340px
        gutter-width: 1.5rem
    self-contained: true
    page-layout: full
    margin-left: 30px
    link-external-newwindow: true
    theme: cosmo
---

```{r setup}
#| include: false
knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  echo = FALSE,
  fig.width = 8,
  fig.height = 6
)

library(readr)
library(ggplot2)
library(gt)
library(dplyr)
library(glue)
library(purrr)
library(tidyr)
library(cli)
library(tools)
library(tibble)
library(lubridate)
library(yaml)
library(arrow)
library(here)

crossbow_theme <- function(data, ...) {
  data %>%
    tab_options(
      table.font.size = 14,
      ...
    )
}
```

```{r vars}
lookback_window <- Sys.getenv("CROSSBOW_LOOKBACK_WINDOW", 120)
```

```{r helper}
is_dev <- function() {
  Sys.getenv("GITHUB_ACTIONS") != "true"
}

arrow_commit_links <- function(sha) {
  glue("<a href='https://github.com/apache/arrow/commit/{sha}' target='_blank'>{substring(sha, 1, 7)}</a>")
}

arrow_compare_links <- function(sha1, sha2) {
  comp_link <- glue("<a href='https://github.com/apache/arrow/compare/{sha1}...{sha2}' target='_blank'>{substring(sha1, 1, 7)}</a>")

  if (rlang::is_empty(comp_link)) {
    return(glue("Build has not yet been successful"))
  }
  return(comp_link)
}

format_links <- function(link) {
  glue("<a href='{link}' target='_blank'>{basename(link)}</a>")
}

make_nice_names <- function(x) {
  toTitleCase(gsub("_", " ", names(x)))
}

arrow_build_table <- function(nightly_data, type, task) {
  type_task_data <- nightly_data %>%
    filter(build_type == type) %>%
    filter(task_name == task)

  ordered_only_recent_fails <- type_task_data %>%
    filter(task_name %in% task_name[nightly_date == max(nightly_date) & task_status != "success"]) %>%
    arrange(desc(nightly_date)) %>%
    mutate(task_status = case_when(
      task_status == "success" ~ "pass",
      task_status == "failure" ~ "fail",
      TRUE ~ task_status
    ))

  if (nrow(ordered_only_recent_fails) == 0) {
    return(tibble())
  }

  ## find first failure index
  idx_recent_fail <- rle(ordered_only_recent_fails$task_status)$lengths[1]

  ## expand failure index and give it some names
  failure_df <- tibble(fails_plus_one = seq(1, idx_recent_fail + 1)) %>%
    mutate(fail_label = case_when(
      fails_plus_one == idx_recent_fail ~ "first_failure",
      fails_plus_one == 1 ~ "most_recent_failure",
      fails_plus_one == idx_recent_fail + 1 ~ "last_successful_build",
      TRUE ~ paste0(fails_plus_one, " days ago")
    )) %>%
    filter(fails_plus_one <= 9 | grepl("failure|build", fail_label))

  ## inner_join to ordered data
  df <- ordered_only_recent_fails %>%
    rowid_to_column() %>%
    inner_join(failure_df, by = c("rowid" = "fails_plus_one"))


  if (all(type_task_data$task_status %in% "failure")) {
    days <- NA_real_
  } else {
    ## days since last successful build (need to add one)
    days <- sum(as.numeric(
      difftime(
        df$nightly_date[df$fail_label == "most_recent_failure"],
        df$nightly_date[df$fail_label == "last_successful_build"]
      )
    ), 1)
  }


  get_commit <- function(label) {
    df$arrow_commit[df$fail_label == label]
  }

  df %>%
    arrange(desc(fail_label)) %>%
    mutate(build_links = glue("<a href='{build_links}' target='_blank'>{task_status}</a>")) %>%
    select(task_name, build_type, build_links, fail_label) %>%
    pivot_wider(names_from = fail_label, values_from = build_links) %>%
    mutate(
      since_last_successful_build = days,
      last_successful_commit = arrow_compare_links(get_commit("last_successful_build"), get_commit("first_failure")),
      .after = build_type
    )
}
```


```{r data load}
#| messages: false

cols <- c(
  "task_name", "task_build_status", "build_links", "task_branch_name_on_the_crossbow_repo",
  "task_ci_type", "extra_params", "task_template_used", "arrow_repository_commit"
)

## Here is where we tidy the data until a 1 value 1 cell data structure
nightly <- open_csv_dataset(here("csv_reports")) %>%
  mutate(file_path = add_filename()) %>%
  mutate(build_links = gsub("^(.*?),.*", "\\1", build_links)) %>% ## get rid of multiple build links
  mutate(build_links = gsub("\\?.*", "", gsub("\\['|'\\]|'", "", build_links))) %>% ## gets rid of the extra formatting
  mutate(nightly_name = gsub("\\.csv$", "", gsub("^.*/", "", file_path))) %>%
  mutate(build_type = str_to_title((gsub("[0-9]|nightly|-", "", nightly_name)))) %>%
  mutate(nightly_date = ymd(gsub(".*-(\\d{4}-\\d{2}-\\d{2})-.*", "\\1", nightly_name))) %>%
  as_record_batch_reader() %>% 
  filter(nightly_date >= ymd("2023-07-01")) %>% 
  collect() %>% 
  filter(nightly_date >= Sys.Date() - days(lookback_window))


most_recent_commit <- unique(nightly$arrow_commit[nightly$nightly_date == max(nightly$nightly_date)])
```

<a href='https://arrow.apache.org/'><img src='https://arrow.apache.org/img/arrow-logo_hex_black-txt_white-bg.png' align="right" height="150" /></a>

This report builds in sync with the email notifications (`builds@arrow.apache.org`). `r pluralize('Most recent commit{?s}:  {arrow_commit_links(most_recent_commit)}')`


# Summary 
```{r}
pass_pct <- nightly %>%
  count(nightly_date, arrow_commit, build_type, task_status) %>%
  group_by(nightly_date, build_type) %>%
  mutate(prop = n / sum(n)) %>%
  filter(task_status == "success") %>%
  ungroup()

## 1% threshold
## days
over_x_days <- 10
trend <- pass_pct %>%
  filter(nightly_date > max(nightly_date) - ddays(over_x_days)) %>%
  nest(data = -build_type) %>%
  mutate(model = map(data, ~ lm(prop ~ nightly_date, .x))) %>%
  mutate(slope_pct_day = map_dbl(model, ~ coef(.x)["nightly_date"])) %>%
  mutate(failure_trend = case_when(
    slope_pct_day < -0.01 ~ "increasing",
    slope_pct_day > 0.01 ~ "decreasing",
    TRUE ~ "stable"
  )) %>%
  select(build_type, failure_trend)


nightly_summary <- pass_pct %>%
  group_by(build_type) %>%
  filter(nightly_date == max(nightly_date)) %>%
  ungroup() %>%
  pivot_wider(names_from = task_status, values_from = n, values_fill = 0) %>%
  mutate(arrow_commit = arrow_commit_links(arrow_commit)) %>%
  arrange(desc(nightly_date)) %>%
  left_join(trend, by = c("build_type"))

names(nightly_summary) <- make_nice_names(nightly_summary)

nightly_summary %>%
  gt() %>%
  fmt_markdown("Arrow Commit") %>%
  tab_footnote(
    footnote = glue("Trend calculated over {over_x_days} days"),
    locations = cells_column_labels(
      columns = `Failure Trend`
    )
  )
```


```{r ojs-hand-off}
ojs_define(plot_end_date = max(pass_pct$nightly_date))# + days(7))
ojs_define(plot_default_date = max(pass_pct$nightly_date) - days(14))
ojs_define(ojs_pass_pct = pass_pct)
```

# Trend

```{ojs functions}
trendPlot = function(data) {
  // variables to use
  const spec = ({
    x: "nightly_date", 
    y: "prop", 
    stroke: "build_type", 
    fy: "build_type"
  })

  const added_spec = Object.assign(
    {},
    spec,
    {
      tip: true,
      symbol: "circle",
      fill: "build_type",  
      opacity: 0.7
    }
  )

  return Plot.plot({
    width: 1200,
    height: 600,
    nice: true,
    color: {scheme: "viridis"},
    facet: {
      data: data,
      y: "build_type",
      marginRight: 90,
      marginLeft: 10,
      },
      fy: {
        inset: 15,
        padding: 0.1,
        label: ""
      },
    y: {
      domain: [0, 100],
      label: "Proportion successful (%)",
      percent: true
    },
    x: {
      type: "utc",
      label: "",
      tickFormat: "%b '%y",
    },
    style: {
      fontSize: "16px"
    },
    marks: [
      Plot.lineY(data, Plot.windowY(10, spec)),
      Plot.frame(),
      Plot.dot(data, added_spec),
      Plot.axisX({ticks: d3.utcMonth.every(1), tickFormat: " %b", tickSize: 14, tickPadding: -10, textAnchor: "start"}),
      Plot.axisX({ticks: d3.utcYear, tickFormat: "\n %Y", tickSize: 24, tickPadding: -20, textAnchor: "start"}),
      Plot.gridX({ticks: d3.utcMonth})
      ]
    })
}
```

```{ojs setup-ojs}
// import newer observable
Plot = await import("https://esm.sh/@observablehq/plot");
import { aq, op } from '@uwdata/arquero';
parser = d3.timeParse("%Y-%m-%d");
import {slider as slide} from "@jashkenas/inputs"; // more configurable slider
timeScale = d3.scaleTime()
    .domain([initialPlotStartDate, plotEndDate])
    .range([0, d3.timeDay.count(initialPlotStartDate, plotEndDate)]); 

passPct = aq.from(transpose(ojs_pass_pct))
  .derive({ nightly_date: aq.escape(d => parser(d.nightly_date)) })
```

```{ojs date-slider}
minNightlyDate = passPct
  .rollup({
    min_nightly_date: d => op.min(d.nightly_date)
  })
  .array('min_nightly_date')

// Slider for date
initialPlotStartDate = new Date(minNightlyDate)
plotEndDate = new Date(plot_end_date)
plotDefaultDate = new Date(plot_default_date)

// a slider that starts at the default date (value of CROSSBOW_LOOKBACK_WINDOW)
viewof slider = slide({
  min: 0, 
  max: d3.timeDay.count(initialPlotStartDate, plotEndDate), 
  format: d => md`${d3.timeFormat("%B %d, %Y")(timeScale.invert(d))}`,
  title: "Plot minimum date", 
  value: d3.timeDay.count(initialPlotStartDate, plotDefaultDate),
  step: 2
})

// turn slide number back into a date
date = timeScale.invert(slider)
```

```{ojs trend-plot}
//| echo: false

passPctDateSub = passPct
  .filter(aq.escape(d => d.nightly_date > date))

trendPlot(passPctDateSub)
```

# Build Status  

::: {.panel-tabset}

```{r build_status}
#| results: "asis"
# this file can be generated with `archery crossbow check-config > all.yml`
tasks <- yaml.load_file(here("all.yml"))

tests <- tasks$groups[["nightly-tests"]]
packaging <- tasks$groups[["nightly-packaging"]]
release <- tasks$groups[["nightly-release"]]
nightly_regex <-  paste0(c(tests, packaging, release), collapse = "|")

active_jobs <- tasks$tasks %>% names() %>% grep(nightly_regex, x = ., value = TRUE)

map_params <- nightly %>%
  distinct(task_name, build_type) %>%
  filter(task_name %in% active_jobs)

build_table <- map2_df(map_params$build_type, map_params$task_name, ~ arrow_build_table(nightly, type = .x, task = .y))

for (.x in unique(build_table$build_type)) {
  cat(glue("\n## {.x}"), "\n")

  bs_nightly_tbl <- build_table %>%
    filter(build_type == .x) %>%
    select(-build_type) %>%
    select(where(~ sum(!is.na(.x)) > 0)) %>% ## remove any columns with no data
    arrange(desc(since_last_successful_build)) %>%
    rowwise() %>%
    mutate(
      since_last_successful_build = ifelse(
        is.na(since_last_successful_build), "-",
        pluralize("{since_last_successful_build} day{?s}")
      )
    )

  ## Need to sort columns at this level because of variable fail dates
  ## TODO: find something a little less hacky
  bs_nightly_tbl <- bs_nightly_tbl[, rev(sort(names(bs_nightly_tbl)))] %>%
    relocate(any_of("most_recent_failure"), .after = last_col()) %>%
    relocate(any_of(c("last_successful_build", "first_failure")), .after = last_successful_commit)

  names(bs_nightly_tbl) <- make_nice_names(bs_nightly_tbl)

  bs_nightly_tbl %>%
    gt() %>%
    cols_align("left") %>%
    cols_width(`Task Name` ~ px(300)) %>%
    fmt_markdown(matches("success|failure|days")) %>%
    sub_missing(
      everything(),
      missing_text = ""
    ) %>%
    crossbow_theme() %>%
    print()
}
```

:::



# Error Logs

::: {.panel-tabset}

```{r error-logs}
#| results: "asis"
#| eval: false
month_year_order <- rev(unique(format(sort(as.Date(nightly$nightly_date)), "%b %Y")))

for (.x in month_year_order) {
  nightly_sub <- nightly %>%
    filter(format(as.Date(nightly_date), "%b %Y") %in% .x)

  cat(glue("\n## {.x}"), "\n")

  nightly_sub_tbl <- nightly_sub %>%
    # filter(task_status == "failure") %>%
    select(nightly_date, task_status, task_name, build_type, build_links, task_branch_name = crossbow_branch_url) %>%
    mutate(
      build_links = format_links(build_links),
      task_branch_name = format_links(task_branch_name)
    ) %>%
    arrange(desc(nightly_date))

  names(nightly_sub_tbl) <- make_nice_names(nightly_sub_tbl)

  nightly_sub_tbl %>%
    head(10) %>% 
    gt() %>%
    fmt_markdown(c("Build Links", "Task Branch Name")) %>%
    crossbow_theme() %>%
    print()
}
```

:::