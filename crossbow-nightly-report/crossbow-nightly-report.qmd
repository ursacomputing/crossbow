---
title: "Crossbow Nightly Report"
execute: 
  warning: false
  echo: false
format: 
  html:
    grid:
        sidebar-width: 0px
        body-width: 2000px
        margin-width: 340px
        gutter-width: 1.5rem
    self-contained: true
    page-layout: full
    margin-left: 30px
    link-external-newwindow: true
    theme: [cosmo, crossbow.scss]
---

```{r setup}
#| include: false
knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  echo = FALSE,
  fig.width = 8,
  fig.height = 6
)

library(readr)
library(ggplot2)
library(gt)
library(dplyr)
library(glue)
library(purrr)
library(tidyr)
library(cli)
library(tools)
library(tibble)
library(lubridate)
library(yaml)
library(arrow)
library(reactable)
library(htmltools)

source("R/functions.R")
```

```{r vars}
lookback_window <- Sys.getenv("CROSSBOW_LOOKBACK_WINDOW", 120)
```


```{r data load}
#| messages: false

cols <- c(
  "task_name", "task_build_status", "build_links", "task_branch_name_on_the_crossbow_repo",
  "task_ci_type", "extra_params", "task_template_used", "arrow_repository_commit"
)

lookback_date <- Sys.Date() - days(lookback_window)

## Here is where we tidy the data until a 1 value 1 cell data structure
nightly <- open_csv_dataset("../csv_reports") %>%
  mutate(file_path = add_filename()) %>%
  mutate(build_links = gsub("^(.*?),.*", "\\1", build_links)) %>% ## get rid of multiple build links
  mutate(build_links = gsub("\\?.*", "", gsub("\\['|'\\]|'", "", build_links))) %>% ## gets rid of the extra formatting
  mutate(nightly_name = gsub("\\.csv$", "", gsub("^.*/", "", file_path))) %>%
  mutate(build_type = str_to_title((gsub("[0-9]|nightly|-", "", nightly_name)))) %>%
  mutate(nightly_date = ymd(gsub(".*-(\\d{4}-\\d{2}-\\d{2})-.*", "\\1", nightly_name))) %>%
  as_record_batch_reader() %>% 
  filter(nightly_date >= lookback_date) %>% 
  collect() 


most_recent_commit <- unique(nightly$arrow_commit[nightly$nightly_date == max(nightly$nightly_date)])
```

<a href='https://arrow.apache.org/'><img src='https://arrow.apache.org/img/arrow-logo_hex_black-txt_white-bg.png' align="right" height="150" /></a>

This report builds in sync with the email notifications (`builds@arrow.apache.org`). `r pluralize('Most recent commit{?s} are:  {arrow_commit_links(most_recent_commit)}')`. The report examines data from the last `r lookback_window` days.


# Summary 
```{r}
pass_pct <- nightly %>%
  count(nightly_date, arrow_commit, build_type, task_status) %>%
  group_by(nightly_date, build_type) %>%
  mutate(prop = n / sum(n)) %>%
  filter(task_status == "success") %>%
  ungroup()

## 1% threshold
## days
over_x_days <- 10
trend <- pass_pct %>%
  filter(nightly_date > max(nightly_date) - ddays(over_x_days)) %>%
  nest(data = -build_type) %>%
  mutate(model = map(data, ~ lm(prop ~ nightly_date, .x))) %>%
  mutate(slope_pct_day = map_dbl(model, ~ coef(.x)["nightly_date"])) %>%
  mutate(failure_trend = case_when(
    slope_pct_day < -0.01 ~ "increasing",
    slope_pct_day > 0.01 ~ "decreasing",
    TRUE ~ "stable"
  )) %>%
  select(build_type, failure_trend)


nightly_summary <- pass_pct %>%
  group_by(build_type) %>%
  filter(nightly_date == max(nightly_date)) %>%
  ungroup() %>%
  pivot_wider(names_from = task_status, values_from = n, values_fill = 0) %>%
  mutate(arrow_commit = arrow_commit_links(arrow_commit)) %>%
  arrange(desc(nightly_date)) %>%
  left_join(trend, by = c("build_type"))

names(nightly_summary) <- make_nice_names(nightly_summary)

nightly_summary %>%
  gt() %>%
  fmt_markdown("Arrow Commit") %>%
  tab_footnote(
    footnote = glue("Trend calculated over {over_x_days} days"),
    locations = cells_column_labels(
      columns = `Failure Trend`
    )
  ) %>% 
  opt_all_caps()
```


```{r ojs-hand-off}
ojs_define(plot_end_date = max(pass_pct$nightly_date))
ojs_define(plot_default_date = max(pass_pct$nightly_date) - months(1))
ojs_define(ojs_pass_pct = pass_pct)
```

# Trend

```{ojs functions}
trendPlot = function(data) {
  // variables to use
  const spec = ({
    x: "nightly_date", 
    y: "prop", 
    stroke: "build_type", 
    fy: "build_type"
  })

  const added_spec = Object.assign(
    {},
    spec,
    {
      tip: true,
      symbol: "circle",
      fill: "build_type",  
      opacity: 0.7
    }
  )

  return Plot.plot({
    width: 1200,
    height: 600,
    inset: 10, 
    nice: true,
    color: {scheme: "viridis"},
    facet: {
      data: data,
      y: "build_type",
      marginRight: 90,
      marginLeft: 10,
      },
      fy: {
        inset: 15,
        padding: 0.1,
        label: ""
      },
    y: {
      domain: [0, 100],
      label: "Proportion successful (%)",
      percent: true,
      labelOffset: 40
    },
    x: {
      type: "utc",
      label: "Date",
      tickFormat: "%b '%y",
    },
    style: {
      fontSize: "16px"
    },
    marks: [
      Plot.lineY(data, Plot.windowY(10, spec)),
      Plot.frame(),
      Plot.dot(data, added_spec),
      Plot.axisX({ticks: d3.utcMonth.every(1), tickFormat: " %b %d", tickSize: 14, tickPadding: -8, textAnchor: "start"}),
      Plot.axisX({ticks: d3.utcYear, tickFormat: "\n %Y", tickSize: 24, tickPadding: -20, textAnchor: "start"}),
      Plot.gridX({ticks: d3.utcMonth})
      ]
    })
}
```

```{ojs setup-ojs}
// import newer observable
Plot = await import("https://esm.sh/@observablehq/plot");
import { aq, op } from '@uwdata/arquero';
parser = d3.timeParse("%Y-%m-%d");
import {slider as slide} from "@jashkenas/inputs"; // more configurable slider
timeScale = d3.scaleTime()
    .domain([initialPlotStartDate, plotEndDate])
    .range([0, d3.timeDay.count(initialPlotStartDate, plotEndDate)]); 

passPct = aq.from(transpose(ojs_pass_pct))
  .derive({ nightly_date: aq.escape(d => parser(d.nightly_date)) })
```

```{ojs date-slider}
minNightlyDate = passPct
  .rollup({
    min_nightly_date: d => op.min(d.nightly_date)
  })
  .array('min_nightly_date')

// Slider for date
initialPlotStartDate = new Date(minNightlyDate)
plotEndDate = new Date(plot_end_date)
plotDefaultDate = new Date(plot_default_date)

// a slider that starts at the default date (value of CROSSBOW_LOOKBACK_WINDOW)
viewof slider = slide({
  min: 0, 
  max: d3.timeDay.count(initialPlotStartDate, plotEndDate), 
  format: d => md`${d3.timeFormat("%B %d, %Y")(timeScale.invert(d))}`,
  title: "Plot minimum date", 
  value: d3.timeDay.count(initialPlotStartDate, plotDefaultDate),
  step: 2
})

// turn slide number back into a date
date = timeScale.invert(slider)
```

```{ojs trend-plot}
//| echo: false

passPctDateSub = passPct
  .filter(aq.escape(d => d.nightly_date > date))

trendPlot(passPctDateSub)
```

# Build Status  

```{r build_status}
#| results: asis
# this file can be generated with `archery crossbow check-config > all.yml`
tasks <- yaml.load_file("../all.yml")

tests <- tasks$groups[["nightly-tests"]]
packaging <- tasks$groups[["nightly-packaging"]]
release <- tasks$groups[["nightly-release"]]
nightly_regex <-  paste0(c(tests, packaging, release), collapse = "|")

active_jobs <- tasks$tasks %>% names() %>% grep(nightly_regex, x = ., value = TRUE)

map_params <- nightly %>%
  distinct(task_name, build_type) %>%
  filter(task_name %in% active_jobs)

build_table <- map2_df(map_params$build_type, map_params$task_name, ~ arrow_build_table(nightly, type = .x, task = .y))
```


```{r build_table}
bs_nightly_tbl <- build_table %>%
  select(where(~ sum(!is.na(.x)) > 0)) %>% ## remove any columns with no data
  arrange(build_type, most_recent_status, desc(since_last_successful_build)) %>%
  rowwise() %>%
  mutate(
    since_last_successful_build = ifelse(
      is.na(since_last_successful_build), "-",
      pluralize("{since_last_successful_build} day{?s}")
    )
  ) %>%
  ungroup()

## Need to sort columns at this level because of variable fail dates
## TODO: find something a little less hacky
bs_nightly_tbl_sorted <- bs_nightly_tbl[, rev(sort(names(bs_nightly_tbl)))] %>%
  relocate(any_of("most_recent_failure"), .after = last_col()) %>%
  relocate(any_of(c("last_successful_build", "first_failure")), .after = last_successful_commit) %>%
  relocate(build_type, .before = task_name)

## set a row number such all the failing builds are always displayed
tbl_row_n <- bs_nightly_tbl_sorted %>%
  filter(most_recent_status == "failing") %>%
  count(build_type) %>%
  filter(n == max(n)) %>%
  pull(n)

names(bs_nightly_tbl_sorted) <- make_nice_names(bs_nightly_tbl_sorted)

## html element id
build_element_id <- "build_status"

bs_nightly_tbl_sorted %>%
  reactable(
    filterable = TRUE,
    highlight = TRUE,
    wrap = TRUE,
    # style = list(fontSize = "0.6rem"),
    defaultPageSize = tbl_row_n,
    rowStyle = function(index) {
      if (bs_nightly_tbl_sorted[index, "Most Recent Status"] == "failing") {
        list(background = "#ffe4e4")
      } else {
        list(background = "#d1e8ff")
      }
    },
    defaultColDef = reactable::colDef(
      html = TRUE,
      class = "bw_table_cells",
      headerClass = "bw_table_header",
      headerVAlign = "bottom",
      width = 50
    ),
    columns = list(
      `Build Type` = reactable::colDef(
        width = 80,
        filterInput = function(values, name) {
          dropdown_helper(values, name, build_element_id)
        }
      ),
      `Task Name` = reactable::colDef(
        width = 110
      ),
      `Since Last Successful Build` = reactable::colDef(
        width = 100,
        filterInput = function(values, name) {
          dropdown_helper(values, name, build_element_id)
        }
      ),
      `Most Recent Status` = reactable::colDef(
        width = 70,
        filterInput = function(values, name) {
          dropdown_helper(values, name, build_element_id)
        }
      ),
      `Last Successful Commit` = reactable::colDef(
        width = 80
      ),
      `Last Successful Build` = reactable::colDef(
        width = 80
      ),
      `First Failure` = reactable::colDef(
        width = 60
      ),
      `Most Recent Failure` = reactable::colDef(
        width = 60
      )
    ),
    elementId = build_element_id
  )
```

# Logs

```{r error-logs}
#| results: asis
#| eval: true

error_element_id <- "error-logs-id"
nightly_sub_tbl <- nightly %>%
  select(nightly_date, task_status, task_name, build_type, build_links, task_branch_name = crossbow_branch_url) %>%
  mutate(
    build_links = format_links(build_links),
    task_branch_name = format_links(task_branch_name)
  ) %>%
  arrange(desc(nightly_date))

names(nightly_sub_tbl) <- make_nice_names(nightly_sub_tbl)

nightly_sub_tbl %>%
  reactable(
    filterable = TRUE,
    highlight = TRUE,
    wrap = TRUE,
    rowStyle = function(index) {
      if (nightly_sub_tbl[index, "Task Status"] %in% c("failure", "error")) {
        list(background = "#ffe4e4")
      } else {
        list(background = "#d1e8ff")
      }
    },
    defaultColDef = reactable::colDef(
      html = TRUE,
      class = "bw_table_cells",
      headerClass = "bw_table_header",
      headerVAlign = "bottom",
      width = 100
    ),
    columns = list(
      `Task Status` = reactable::colDef(
        width = 80,
        filterInput = function(values, name) {
          dropdown_helper(values, name, error_element_id)
        }
      ),
      `Task Name` = reactable::colDef(
        width = 200,
        filterInput = function(values, name) {
          dropdown_helper(values, name, error_element_id)
        }
      ),
      `Build Type` = reactable::colDef(
        width = 100,
        filterInput = function(values, name) {
          dropdown_helper(values, name, error_element_id)
        }
      ),
      `Task Branch Name` = reactable::colDef(
        width = 300
      )
    ),
    elementId = error_element_id
  )
```