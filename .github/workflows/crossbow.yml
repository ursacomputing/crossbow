# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# NOTE: must set "Crossbow" as name to have the badge links working in the
# github comment reports!
name: Crossbow
on:
  push:
    branches:
      - "*-github-*"

env:
  ARCHERY_DEBUG: 1


jobs:
  build:
    name: "Build wheel for Windows"
    runs-on: windows-2022
    env:
      # archery uses this environment variable
      PYTHON: "3.12"
      PYTHON_ABI_TAG: "cp312"
      # this is a private repository at the moment (mostly because of licensing
      # consideration of windows images with visual studio), but anyone can
      # recreate the image by manually building it via:
      # `archery build python-wheel-windows-vs2022`
      # note that we don't run docker build since there wouldn't be a cache hit
      # and rebuilding the dependencies takes a fair amount of time
      REPO: ghcr.io/ursacomputing/arrow
      # BuildKit isn't really supported on Windows for now.
      # NuGet + GitHub Packages based vcpkg cache is also disabled for now.
      # Because secret mount requires BuildKit.
      DOCKER_BUILDKIT: 0

    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: arrow
          repository: apache/arrow
          ref: 6933c67af76c52cc858504b92a124b665d54dbe3
          submodules: recursive

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: 3.12
      - name: Install Archery
        shell: bash
        run: pip install -e arrow/dev/archery[all]


      - name: Prepare
        shell: bash
        run: |
          case "${PYTHON_ABI_TAG}" in
            *t)
              test_image_prefix=python-free-threaded
              ;;
            *)
              test_image_prefix=python
              ;;
          esac
          echo "TEST_IMAGE_PREFIX=${test_image_prefix}" >> ${GITHUB_ENV}

      - name: Build wheel
        shell: cmd
        run: |
          cd arrow
          @rem We want to use only
          @rem   archery docker run -e SETUPTOOLS_SCM_PRETEND_VERSION=22.0.0.dev71 python-wheel-windows-vs2022
          @rem but it doesn't use pulled caches.
          @rem It always build an image from scratch.
          @rem We can remove this workaround once we find a way to use
          @rem pulled caches when build an image.
          echo on
          archery docker pull --no-ignore-pull-failures %TEST_IMAGE_PREFIX%-wheel-windows-vs2022
          if errorlevel 1 (
            archery docker build --no-pull %TEST_IMAGE_PREFIX%-wheel-windows-vs2022 || exit /B 1
          )
          archery docker run --no-build -e SETUPTOOLS_SCM_PRETEND_VERSION=22.0.0.dev71 %TEST_IMAGE_PREFIX%-wheel-windows-vs2022

      - uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: arrow/python/repaired_wheels/*.whl

      - name: Test wheel
        shell: cmd
        run: |
          cd arrow
          archery docker pull --no-ignore-pull-failures %TEST_IMAGE_PREFIX%-wheel-windows-test
          if errorlevel 1 (
            archery docker build --no-pull %TEST_IMAGE_PREFIX%-wheel-windows-test || exit /B 1
          )
          archery docker run %TEST_IMAGE_PREFIX%-wheel-windows-test

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Checkout Crossbow
        uses: actions/checkout@v4
        with:
          path: crossbow
          ref: nightly-packaging-2025-08-24-0
      - name: Setup Crossbow
        shell: bash
        run: |
          python3 -m pip install -e arrow/dev/archery[crossbow]
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Upload artifacts
        shell: bash
        run: |
          archery crossbow \
            --queue-path $(pwd)/crossbow \
            --queue-remote https://github.com/ursacomputing/crossbow \
            upload-artifacts \
            --sha nightly-packaging-2025-08-24-0-github-wheel-windows-cp312-cp312-amd64 \
            --tag nightly-packaging-2025-08-24-0-github-wheel-windows-cp312-cp312-amd64 \
            "arrow/python/repaired_wheels/*.whl"
        env:
          CROSSBOW_GITHUB_TOKEN: ${{ secrets.CROSSBOW_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Verify uploaded artifacts
        shell: bash
        run: |
          archery crossbow \
            --queue-path $(pwd)/crossbow \
            --queue-remote https://github.com/ursacomputing/crossbow \
            status \
            --task-filter 'wheel-windows-cp312-cp312-amd64' \
            --no-fetch \
            --validate \
            nightly-packaging-2025-08-24-0
        env:
          CROSSBOW_GITHUB_TOKEN: ${{ secrets.CROSSBOW_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "ruby"
      - name: Install gemfury client
        run: |
          gem install gemfury
      - name: Upload package to Gemfury
        shell: bash
        run: |
          if $(fury versions --as=${CROSSBOW_GEMFURY_ORG} --api-token=${CROSSBOW_GEMFURY_TOKEN} pyarrow | grep --fixed-strings -q "22.0.0.dev71"); then
            echo "Version 22.0.0.dev71 already exists. Avoid pushing version."
          else
            fury push \
              --api-token=${CROSSBOW_GEMFURY_TOKEN} \
              --as=${CROSSBOW_GEMFURY_ORG} \
              arrow/python/repaired_wheels/*.whl
          fi
        env:
          CROSSBOW_GEMFURY_TOKEN: ${{ secrets.CROSSBOW_GEMFURY_TOKEN }}
          CROSSBOW_GEMFURY_ORG: ${{ secrets.CROSSBOW_GEMFURY_ORG }}

      - name: Upload wheel to Anaconda scientific-python
        shell: bash
        run: |
          # check if completion actually expands to wheel files
          # to prevent empty dirs from failing silently
          if ! compgen -G "arrow/python/repaired_wheels/*.whl" > /dev/null; then
              echo "No wheel files found!"
              exit 1
          fi
          python3 -m pip install git+https://github.com/Anaconda-Platform/anaconda-client.git@1.12.3
          anaconda -t ${CROSSBOW_SCIENTIFIC_PYTHON_UPLOAD_TOKEN} upload --force -u scientific-python-nightly-wheels --label main arrow/python/repaired_wheels/*.whl
        env:
          CROSSBOW_SCIENTIFIC_PYTHON_UPLOAD_TOKEN: ${{ secrets.CROSSBOW_SCIENTIFIC_PYTHON_UPLOAD_TOKEN }}


      - name: Push Docker image
        shell: cmd
        run: |
          cd arrow
          archery docker push %TEST_IMAGE_PREFIX%-wheel-windows-vs2022
          archery docker push %TEST_IMAGE_PREFIX%-wheel-windows-test
